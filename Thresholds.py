from tkinter import *
from tkinter import ttk
from turtle import bgcolor
from PIL import ImageTk, Image
import sv_ttk
import tkinter as tk

class MyWindow:
    def __init__(self, win):
        self.lbl1=Label(win, text='Total Marks:',font=('Bahnschrift',13))
        self.lbls=Label(win, text='A* :',font=('Bahnschrift',13))
        self.lbla=Label(win, text='A :',font=('Bahnschrift',13))
        self.lblb=Label(win, text='B :',font=('Bahnschrift',13))
        self.lblc=Label(win, text='C :',font=('Bahnschrift',13))
        self.lbld=Label(win, text='D :',font=('Bahnschrift',13))
        self.lble=Label(win, text='E :',font=('Bahnschrift',13))
        self.lblf=Label(win, text='F :',font=('Bahnschrift',13))
        self.lblg=Label(win, text='G :',font=('Bahnschrift',13))
        self.ts=ttk.Entry(font=('Bahnschrift',10))
        self.ta=ttk.Entry(font=('Bahnschrift',10))
        self.tb=ttk.Entry(font=('Bahnschrift',10))
        self.tc=ttk.Entry(font=('Bahnschrift',10))
        self.td=ttk.Entry(font=('Bahnschrift',10))
        self.te=ttk.Entry(font=('Bahnschrift',10))
        self.tf=ttk.Entry(font=('Bahnschrift',10))
        self.tg=ttk.Entry(font=('Bahnschrift',10))
        self.t1=ttk.Entry(font=('Bahnschrift',10))
        self.btn1 = ttk.Button(win, text='Maths',command=self.math,style='Accent.TButton')
        self.btn2=ttk.Button(win, text='Physics',command=self.physics,style='Accent.TButton')
        self.btn3= ttk.Button(win,text= 'Chemistry',command=self.chemistry,style='Accent.TButton')
        self.btn4= ttk.Button(win,text= 'Biology',command=self.biology,style='Accent.TButton')
        self.photo = tk.PhotoImage(file='logo.png')
        self.img = ttk.Label(win,image=self.photo,padding=1)
        self.img.place(x=140,y=4)
        self.lbl1.place(x=25, y=82)
        self.t1.place(x=140, y=80)
        self.btn1.place(x=20, y=150)
        self.btn2.place(x=98, y=150)
        self.btn3.place(x=265, y=150)
        self.btn4.place(x=180,y=150)
        self.lbls.place(x=80, y=220)
        self.lbla.place(x=80, y=270)
        self.lblb.place(x=80, y=320)
        self.lblc.place(x=80, y=370)
        self.lbld.place(x=80, y=420)
        self.lble.place(x=80, y=470)
        self.lblf.place(x=80, y=520)
        self.lblg.place(x=80, y=570)
        self.ts.place(x=140, y=220)
        self.ta.place(x=140, y=270)
        self.tb.place(x=140, y=320)
        self.tc.place(x=140, y=370)
        self.td.place(x=140, y=420)
        self.te.place(x=140, y=470)
        self.tf.place(x=140, y=520)
        self.tg.place(x=140, y=570)

    def chemistry(self):
        self.ts.delete(0, 'end')
        self.ta.delete(0, 'end')
        self.tb.delete(0, 'end')
        self.tc.delete(0, 'end')
        self.td.delete(0, 'end')
        self.te.delete(0, 'end')
        self.tf.delete(0, 'end')
        self.tg.delete(0, 'end')
        num1=int(self.t1.get())
        S = int((161/200) * num1)
        A = int((134/200) * num1)
        B = int((107/200) * num1)
        C = int((81/200) * num1)
        D = int((70/200) * num1)
        E = int((60/200) * num1)
        F = int((49/200) * num1)
        G = int((38/200) * num1)
        self.ts.insert(END,str(S))
        self.ta.insert(END,str(A))
        self.tb.insert(END,str(B))
        self.tc.insert(END,str(C))
        self.td.insert(END,str(D))
        self.te.insert(END,str(E))
        self.tf.insert(END,str(F))
        self.tg.insert(END,str(G))
    
    def physics(self):
            self.ts.delete(0, 'end')
            self.ta.delete(0, 'end')
            self.tb.delete(0, 'end')
            self.tc.delete(0, 'end')
            self.td.delete(0, 'end')
            self.te.delete(0, 'end')
            self.tf.delete(0, 'end')
            self.tg.delete(0, 'end')
            num1=int(self.t1.get())
            S = int((154/200) * num1)
            A = int((129/200) * num1)
            B = int((106/200) * num1)
            C = int((84/200) * num1)
            D = int((71/200) * num1)
            E = int((59/200) * num1)
            F = int((48/200) * num1)
            G = int((37/200) * num1)
            self.ts.insert(END,str(S))
            self.ta.insert(END,str(A))
            self.tb.insert(END,str(B))
            self.tc.insert(END,str(C))
            self.td.insert(END,str(D))
            self.te.insert(END,str(E))
            self.tf.insert(END,str(F))
            self.tg.insert(END,str(G))

    def math(self):
            self.ts.delete(0, 'end')
            self.ta.delete(0, 'end')
            self.tb.delete(0, 'end')
            self.tc.delete(0, 'end')
            self.td.delete(0, 'end')
            self.te.delete(0, 'end')
            self.tf.delete(0, 'end')
            self.tg.delete(0, 'end')
            num1=int(self.t1.get())
            S = int((176/200) * num1)
            A = int((151/200) * num1)
            B = int((126/200) * num1)
            C = int((101/200) * num1)
            D = int((80/200) * num1)
            E = int((60/200) * num1)
            self.ts.insert(END,str(S))
            self.ta.insert(END,str(A))
            self.tb.insert(END,str(B))
            self.tc.insert(END,str(C))
            self.td.insert(END,str(D))
            self.te.insert(END,str(E))
        
    def biology(self):
            self.ts.delete(0, 'end')
            self.ta.delete(0, 'end')
            self.tb.delete(0, 'end')
            self.tc.delete(0, 'end')
            self.td.delete(0, 'end')
            self.te.delete(0, 'end')
            self.tf.delete(0, 'end')
            self.tg.delete(0, 'end')
            num1=int(self.t1.get())
            S = int((158/200) * num1)
            A = int((136/200) * num1)
            B = int((114/200) * num1)
            C = int((93/200) * num1)
            D = int((80/200) * num1)
            E = int((67/200) * num1)
            F = int((55/200) * num1)
            G = int((43/200) * num1)
            self.ts.insert(END,str(S))
            self.ta.insert(END,str(A))
            self.tb.insert(END,str(B))
            self.tc.insert(END,str(C))
            self.td.insert(END,str(D))
            self.te.insert(END,str(E))
            self.tf.insert(END,str(F))
            self.tg.insert(END,str(G))


window=tk.Tk()
sv_ttk.set_theme("dark")

sv_ttk.use_dark_theme()

mywin=MyWindow(window)
window.title('Vanquil Threshold Generator')
window.geometry("380x650+10+10")
window.mainloop()